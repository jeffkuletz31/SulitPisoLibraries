#include "Device.h"
#include "Arduino.h"

static const uint8_t Device::LOGO[] PROGMEM = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x80,
   0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x1c, 0x00, 0x00, 0xf8, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0xf0, 0x03, 0x7f, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00,
   0xf0, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x3f, 0x00, 0x00, 0xf0, 0x01, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0xf0, 0x01, 0xf8, 0x01,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00,
   0xf0, 0x01, 0xf0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x80, 0x7d, 0x00, 0x00, 0xf0, 0x01, 0xf0, 0x03, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x80, 0x7d, 0x00, 0x00, 0xf0, 0x01, 0xf0, 0x03,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf8, 0x00, 0x00,
   0xf0, 0x01, 0xf0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xc0, 0xf8, 0x00, 0x00, 0xf0, 0x01, 0xf0, 0x03, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x60, 0xf8, 0x01, 0x00, 0xf0, 0x01, 0xf0, 0x03,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xf0, 0x01, 0x00,
   0xf0, 0x01, 0xf8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x60, 0xf0, 0x01, 0x00, 0xf0, 0x01, 0xf8, 0x01, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x30, 0xf0, 0x03, 0x00, 0xf0, 0x01, 0xfc, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe0, 0x03, 0x00,
   0xf0, 0x01, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x18, 0xe0, 0x03, 0x00, 0xf0, 0xc1, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x18, 0xc0, 0x07, 0x00, 0xf0, 0xff, 0x03, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0xc0, 0x07, 0x00,
   0xf0, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x0c, 0xc0, 0x0f, 0x00, 0xf0, 0xe1, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x0e, 0x80, 0x0f, 0x00, 0xf0, 0xc1, 0x0f, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x0f, 0x00,
   0xf0, 0x81, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xfe, 0xff, 0x1f, 0x00, 0xf0, 0x81, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x1f, 0x00, 0xf0, 0x01, 0x3f, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x3f, 0x00,
   0xf0, 0x01, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
   0x01, 0x00, 0x3e, 0x00, 0xf0, 0x01, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x3e, 0x00, 0xf0, 0x01, 0xfc, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x7e, 0x00,
   0xf0, 0x01, 0xf8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
   0x00, 0x00, 0x7c, 0x00, 0xf0, 0x01, 0xf0, 0x03, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xfc, 0x00, 0xf0, 0x01, 0xe0, 0x03,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0xf8, 0x00,
   0xf0, 0x01, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70,
   0x00, 0x00, 0xf8, 0x01, 0xf0, 0x01, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0xf8, 0x01, 0xf0, 0x01, 0x80, 0x1f,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x07,
   0xf8, 0x03, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
   0x07, 0x80, 0xff, 0x9f, 0xff, 0x3f, 0x00, 0xff, 0x03, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xff, 0x67, 0xef, 0xe6, 0x9c, 0x83, 0xc3, 0xba, 0x9f,
   0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x94, 0x45, 0x44, 0x22,
   0x41, 0x24, 0x13, 0x51, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44,
   0x11, 0x44, 0x4c, 0x22, 0x41, 0x24, 0x10, 0x45, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xc4, 0x11, 0x7c, 0x54, 0x22, 0x41, 0x24, 0x17, 0x87,
   0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x11, 0x44, 0x64, 0x22,
   0x41, 0x24, 0x12, 0x05, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44,
   0x14, 0x45, 0x44, 0x22, 0x49, 0x24, 0x12, 0x51, 0x02, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xee, 0xe7, 0xee, 0x4e, 0x9c, 0x8f, 0xc3, 0xb9, 0xdf,
   0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8f, 0x3b, 0xe7, 0x70, 0x1e,
   0x8f, 0x33, 0xe7, 0x87, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12,
   0x11, 0x42, 0x20, 0x24, 0x12, 0x21, 0x42, 0x44, 0x02, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x12, 0x11, 0x42, 0x20, 0x24, 0x12, 0x61, 0x42, 0x41,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x1f, 0x42, 0x20, 0x24,
   0x12, 0xa1, 0xc2, 0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e,
   0x11, 0x42, 0x20, 0x1c, 0x0e, 0x21, 0x43, 0x01, 0x02, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x02, 0x11, 0x42, 0x22, 0x04, 0x02, 0x21, 0x42, 0x44,
   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x3b, 0xe7, 0x73, 0x0e,
   0x87, 0x73, 0xe2, 0xc7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00 };

static const char  Device::COMPANY[] PROGMEM            = "A.R.T.S";
static const char  Device::COUNTRY[] PROGMEM            = "Philippines";

static const char  Device::TERMINAL[] PROGMEM           = "Terminal";
static const char  Device::COIN[] PROGMEM               = "Coin";
static const char  Device::VACANT[] PROGMEM             = "Vacant";
static const char  Device::TIME[] PROGMEM               = "Time";
static const char  Device::FREE[] PROGMEM               = "Free";

static const char  Device::CURRENT[] PROGMEM            = "Current";
static const char  Device::LIFETIME[] PROGMEM           = "Lifetime";

static const char  Device::TRANSACTION[] PROGMEM        = "Trans";
static const char  Device::GROSS[] PROGMEM              = "Coins";
static const char  Device::SERVINGTIME[] PROGMEM        = "Serve";
static const char  Device::CREDIT[] PROGMEM             = "Credit";
static const char  Device::POWER[] PROGMEM              = "Power";
static const char  Device::FULL[] PROGMEM               = "(Full)";

static const char * const Device::TABLE[] PROGMEM= { 
    Device::COMPANY, 
    Device::COUNTRY, 

    Device::TERMINAL,
    Device::COIN,
    Device::VACANT,
    Device::TIME,
    
    Device::FREE,

    Device::CURRENT,
    Device::LIFETIME,

    Device::TRANSACTION,
    Device::GROSS,
    Device::SERVINGTIME,
    Device::CREDIT,
    Device::POWER,
    Device::FULL
};

static char Device::buffer[15];

static char * Device::getCompany() {
    char * ptr = (char *) pgm_read_word(&Device::TABLE[0]);
    strcpy_P(Device::buffer, ptr);
    return  Device::buffer;
}
static char * Device::getCountry() {
    char * ptr = (char *) pgm_read_word(&Device::TABLE[1]);
    strcpy_P(Device::buffer, ptr);
    return  Device::buffer;
}

static char * Device::getTerminal() {
    char * ptr = (char *) pgm_read_word(&Device::TABLE[2]);
    strcpy_P(Device::buffer, ptr);
    return  Device::buffer;
}

static char * Device::getCoin() {
    char * ptr = (char *) pgm_read_word(&Device::TABLE[3]);
    strcpy_P(Device::buffer, ptr);
    return  Device::buffer;
}

static char * Device::getVacant() {
    char * ptr = (char *) pgm_read_word(&Device::TABLE[4]);
    strcpy_P(Device::buffer, ptr);
    return  Device::buffer;
}

static char * Device::getTime() {
    char * ptr = (char *) pgm_read_word(&Device::TABLE[5]);
    strcpy_P(Device::buffer, ptr);
    return  Device::buffer;
}

static char * Device::getFree() {
    char * ptr = (char *) pgm_read_word(&Device::TABLE[6]);
    strcpy_P(Device::buffer, ptr);
    return  Device::buffer;
}

static char * Device::getCurrent() {
    char * ptr = (char *) pgm_read_word(&Device::TABLE[7]);
    strcpy_P(Device::buffer, ptr);
    return  Device::buffer;
}

static char * Device::getLifetime() {
    char * ptr = (char *) pgm_read_word(&Device::TABLE[8]);
    strcpy_P(Device::buffer, ptr);
    return  Device::buffer;
}

static char * Device::getTransaction() {
    char * ptr = (char *) pgm_read_word(&Device::TABLE[9]);
    strcpy_P(Device::buffer, ptr);
    return  Device::buffer;
}

static char * Device::getGross() {
    char * ptr = (char *) pgm_read_word(&Device::TABLE[10]);
    strcpy_P(Device::buffer, ptr);
    return  Device::buffer;
}

static char * Device::getServingTime() {
    char * ptr = (char *) pgm_read_word(&Device::TABLE[11]);
    strcpy_P(Device::buffer, ptr);
    return  Device::buffer;
}

static char * Device::getCredit() {
    char * ptr = (char *) pgm_read_word(&Device::TABLE[12]);
    strcpy_P(Device::buffer, ptr);
    return  Device::buffer;
}

static char * Device::getPower() {
    char * ptr = (char *) pgm_read_word(&Device::TABLE[13]);
    strcpy_P(Device::buffer, ptr);
    return  Device::buffer;
}

static char * Device::getFull() {
    char * ptr = (char *) pgm_read_word(&Device::TABLE[14]);
    strcpy_P(Device::buffer, ptr);
    return  Device::buffer;
}